# http://docs.openstack.org/juno/install-guide/install/apt/content/section_neutron-networking.html
# http://docs.openstack.org/juno/install-guide/install/apt/content/neutron-controller-node.html

- name: Create database
  mysql_db: name=neutron state=present

- name: Create database user from localhost
  mysql_user: name=neutron host=localhost password={{ neutron_dbpass }} priv=neutron.*:ALL,GRANT state=present

- name: Create database user from %
  mysql_user: name=neutron host=% password={{ neutron_dbpass }} priv=neutron.*:ALL,GRANT state=present

- name: Create the neutron user
  keystone_user:
    user={{ keystone_neutron_name }}
    tenant={{ keystone_service_tenant_name }}
    password={{ keystone_neutron_password }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

- name: Add the admin role to the neutron user
  keystone_user:
    role={{ keystone_admin_role }}
    user={{ keystone_neutron_name }}
    tenant={{ keystone_service_tenant_name }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

#Create the service entity and API endpoint
- name: Test if service entity exists
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone service-list | grep " network "| wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Create the service entity for the Neutron service
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone service-create --name {{ keystone_neutron_name }} --type network --description "OpenStack Networking"
  when: service_entity_exists|failed

- name: Test if endpoint exists
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone endpoint-list | grep 'http://{{ admin_hostname }}:9696' | wc -l
  register: endpoint_exists
  ignore_errors: True
  failed_when: "'0' in endpoint_exists.stdout"

- name: Create the Compute service API endpoints
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone endpoint-create --service-id $(keystone service-list | awk '/ network / {print $2}') --publicurl http://{{ admin_hostname }}:9696 --internalurl http://{{ admin_hostname }}:9696 --adminurl http://{{ admin_hostname }}:9696 --region {{ region_name }}
  when: endpoint_exists|failed

# To install and configure the Compute controller components
- name: Install networking components
  apt: name={{ item }} state=present
  with_items:
  - neutron-server
  - neutron-plugin-ml2
  - python-neutronclient

- name: Register tenant_id var to use in /etc/neutron/neutron.conf
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone tenant-get service | grep id | awk '{print $4}'
  register: tenant_id

- name: Configure neutron server component
  template: src=neutron.conf.j2 dest=/etc/neutron/neutron.conf owner=root group=neutron mode=0644
  notify:
  - populate database
  - restart nova-api
  - restart nova-scheduler
  - restart nova-conductor
  - restart neutron-server

- name: Configure Modular Layer 2 (ML2) plug-in
  template: src=ml2_conf.ini.j2 dest=/etc/neutron/plugins/ml2/ml2_conf.ini owner=root group=neutron mode=0644
  notify:
  - populate database
  - restart nova-api
  - restart nova-scheduler
  - restart nova-conductor
  - restart neutron-server
