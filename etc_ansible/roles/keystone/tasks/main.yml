# http://docs.openstack.org/juno/install-guide/install/apt/content/keystone-install.html
- name: Create database
  mysql_db: name=keystone state=present
  tags: workingon

- name: Create database user to localhost
  mysql_user: name=keystone host=localhost password={{ keystone_dbpass }} priv=keystone.*:ALL,GRANT state=present
  tags: workingon

- name: Create database user to %
  mysql_user: name=keystone host=% password={{ keystone_dbpass }} priv=keystone.*:ALL,GRANT state=present
  tags: workingon

- name: Disable keystone service autostart
  template: src=keystone.override.j2 dest=/etc/init/keystone.override
  tags: workingon

- name: Install keystone
  apt: name={{ item }} state=present
  with_items:
  - keystone
  - python-openstackclient
  - apache2
  - libapache2-mod-wsgi
  - memcached
  - python-memcache
  tags: workingon

- name: Configure keystone service
  template: src=keystone.conf.j2 dest=/etc/keystone/keystone.conf owner=keystone group=root
  notify:
  - populate database
  tags: workingon

- meta: flush_handlers
  tags: workingon

- name: Configure apache hostname
  lineinfile: dest=/etc/apache2/apache2.conf regexp='^\s*ServerName' line="ServerName {{ admin_hostname }}" owner=root group=root mode=0644
  notify:
  - restart apache2
  tags: workingon

- name: Configure apache virtualhost
  template: src=wsgi-keystone.conf.j2 dest=/etc/apache2/sites-available/wsgi-keystone.conf owner=root group=root mode=0644
  notify:
  - restart apache2

- name: Enable apache virtualhost
  file: src=/etc/apache2/sites-available/wsgi-keystone.conf dest=/etc/apache2/sites-enabled/wsgi-keystone.conf owner=root group=root state=link
# Create tenants, users and roles
# http://docs.openstack.org/juno/install-guide/install/apt/content/keystone-users.html
# Admin tenant, user and role
- name: Create the admin tenant
  keystone_user:
    tenant={{ keystone_admin_tenant_name }}
    tenant_description="{{ keystone_admin_tenant_description }}"
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

- name: Create the admin user
  keystone_user:
    user={{ keystone_admin_name }}
    tenant={{ keystone_admin_tenant_name }}
    password={{ keystone_admin_password }}
    email={{ keystone_admin_email }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

- name: Add the admin role to the admin tenant and user
  keystone_user:
    role={{ keystone_admin_role }}
    user={{ keystone_admin_name }}
    tenant={{ keystone_admin_tenant_name }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

# Non admin user tenant, user and role
- name: Create the non admin tenant
  keystone_user:
    tenant={{ keystone_user_tenant_name }}
    tenant_description="{{ keystone_user_tenant_description }}"
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

- name: Create the non admin user
  keystone_user:
    user={{ keystone_user_name }}
    tenant={{ keystone_user_tenant_name }}
    password={{ keystone_user_password }}
    email={{ keystone_user_email }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

- name: Add the non admin role to the non admin tenant and user
  keystone_user:
    role=_member_
    user={{ keystone_user_name }}
    tenant={{ keystone_user_tenant_name }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

# Create the service tenant
- name: Create the service tenant
  keystone_user:
    tenant={{ keystone_service_tenant_name }}
    tenant_description={{ keystone_service_tenant_description }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

#http://docs.openstack.org/juno/install-guide/install/apt/content/keystone-services.html
#Create the service entity and API endpoint
- name: Test if service entity exists
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone service-list | grep " identity "| wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Create the service entity for the Identity service
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone service-create --name {{ keystone_user_name }} --type identity --description "OpenStack Identity"
  when: service_entity_exists|failed

- name: Test if endpoint exists
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone endpoint-list | grep 'http://{{ admin_hostname }}:5000/v2.0' | wc -l
  register: endpoint_exists
  ignore_errors: True
  failed_when: "'0' in endpoint_exists.stdout"

- name: Create the Identity service API endpoints
  shell: |
    export OS_SERVICE_TOKEN={{ administration_token }}
    export OS_SERVICE_ENDPOINT=http://{{ admin_hostname }}:35357/v2.0
    keystone endpoint-create --service-id $(keystone service-list | awk '/ identity / {print $2}') --publicurl http://{{ admin_hostname }}:5000/v2.0 --internalurl http://{{ admin_hostname }}:5000/v2.0 --adminurl http://{{ admin_hostname }}:35357/v2.0  --region {{ region_name }}
  when: endpoint_exists|failed

# http://docs.openstack.org/juno/install-guide/install/apt/content/keystone-client-environment-scripts.html
#  Create OpenStack client environment scripts
- name: Create admin-openrc.sh environment script
  template: src=admin-openrc.sh.j2 dest=/root/{{ keystone_admin_name }}-openrc.sh

- name: Create {{ keystone_user_name }} environment script
  template: src=user-openrc.sh.j2 dest=/root/{{ keystone_user_name }}-openrc.sh
