# http://docs.openstack.org/liberty/install-guide-ubuntu/glance.html

# http://docs.openstack.org/liberty/install-guide-ubuntu/glance-install.html
# mysql
- name: Create database
  mysql_db: name=glance state=present
  when: relational_database == "mysql" or relational_database == "mariadb"

- name: Create database user
  mysql_user: name=glance host=localhost password={{ glance_dbpass }} priv=glance.*:ALL,GRANT state=present
  when: relational_database == "mysql" or relational_database == "mariadb"

- name: Create database user
  mysql_user: name=glance host=% password={{ glance_dbpass }} append_privs=yes priv=glance.*:ALL,GRANT state=present
  when: relational_database == "mysql" or relational_database == "mariadb"

# postgresql
- name: Create database
  postgresql_db: name=glance
  when: relational_database == "postgresql"

- name: Create database user
  postgresql_user: db=glance name=glance password={{ glance_dbpass }} priv=ALL
  when: relational_database == "postgresql"

# http://blog.oddbit.com/2015/10/26/ansible-20-new-openstack-modules/
#- name: Install shade to manage OpenStack objects with ansible
#  package: name=python-shade state=present
#  tags: workingon

# This does not work :'(
#- name: Create the glance user
#  os_user:
#    cloud: openstack-vcenter
##    auth:
##      auth_url: "http://{{ public_hostname }}:5000/v2.0"
##      username: "{{ keystone_admin_name }}"
##      password: "{{ keystone_admin_password }}"
##      project_name: "{{ keystone_admin_project_name }}"
#    name: "{{ keystone_glance_name }}"
#    password: "{{ keystone_glance_password }}"
#    domain: "{{ keystone_default_domain_name }}"
#    default_project: "service"
#  tags: workingon

# Create glance user
- name: Test if glance user exists
  shell: |
    openstack user list | grep " glance " | wc -l
  register: glance_user_exists
  ignore_errors: True
  failed_when: "'0' in glance_user_exists.stdout"

- name: Create the glance user
  shell: |
    openstack user create --domain {{ keystone_default_domain_name }} --password {{ keystone_glance_password }} {{ keystone_glance_name }}
    openstack role add --project {{ keystone_service_project_name }} --user {{ keystone_glance_name}} {{ keystone_admin_role }}
  when: glance_user_exists|failed


#Create the service entity and API endpoint
- name: Test if service entity exists
  shell: |
    openstack service list | grep " image "| wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Create the glance service entity
  shell: |
    openstack service create --name {{ keystone_glance_name }} --description "OpenStack Image Service" image
  when: service_entity_exists|failed

- name: Test if endpoint exists
  shell: |
    openstack endpoint list | grep " image " | wc -l
  register: endpoint_exists
  ignore_errors: True
  failed_when: "'0' in endpoint_exists.stdout"

- name: Create the Image service API endpoints
  shell: |
    openstack endpoint create --region {{ region_name }} image public http://{{ admin_hostname }}:9292
    openstack endpoint create --region {{ region_name }} image internal http://{{ admin_hostname }}:9292
    openstack endpoint create --region {{ region_name }} image admin http://{{ admin_hostname }}:9292
  when: endpoint_exists|failed

# To install and configure the Image Service components
- name: Install glance
  apt: name=glance state=present
  tags:
  - appliance

- name: Install python-glanceclient
  apt: name=python-glanceclient state=present
  tags:
  - appliance

- name: Configure glance api service
  template: src=glance-api.conf.j2 dest=/etc/glance/glance-api.conf owner=glance group=glance mode=0644
  notify:
  - populate database
  - restart glance-api

- name: Configure glance registry service
  template: src=glance-registry.conf.j2 dest=/etc/glance/glance-registry.conf owner=glance group=glance mode=0644
  notify:
  - populate database
  - restart glance-registry

- name: Remove sqlite database
  file: path=/var/lib/glance/glance.sqlite state=absent
