# http://docs.openstack.org/liberty/install-guide-ubuntu/cinder.html

# http://docs.openstack.org/liberty/install-guide-ubuntu/cinder-controller-install.html
# mysql
- name: Create mysql database
  mysql_db: name=cinder state=present
  when: relational_database == "mysql" or relational_database == "mariadb"

- name: Create mysql database user
  mysql_user: name=cinder host=localhost password={{ cinder_dbpass }} priv=cinder.*:ALL,GRANT state=present
  when: relational_database == "mysql" or relational_database == "mariadb"

- name: Create mysql database user
  mysql_user: name=cinder host=% password={{ cinder_dbpass }} priv=cinder.*:ALL,GRANT state=present
  when: relational_database == "mysql" or relational_database == "mariadb"

# postgresql
- name: Create postgresql database
  postgresql_db: name=cinder
  when: relational_database == "postgresql"

- name: Create postgresql database user
  postgresql_user: db=cinder name=cinder password={{ cinder_dbpass }} priv=ALL
  when: relational_database == "postgresql"


# Create cinder user
- name: Test if cinder user exists
  shell: |
    openstack user list | grep " {{ keystone_cinder_name }}" | wc -l
  register: cinder_user_exists
  ignore_errors: True
  failed_when: "'0' in cinder_user_exists.stdout"

- name: Create the cinder user
  shell: |
    openstack user create --domain {{ keystone_default_domain_name }} --password {{ keystone_cinder_password }} {{ keystone_cinder_name }}
    openstack role add --project {{ keystone_service_project_name }} --user {{ keystone_cinder_name }} {{ keystone_admin_role }}
  when: cinder_user_exists|failed


#Create the service entity and API endpoint
- name: Test if service entity exists
  shell: |
    openstack service list | grep " volume "| wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Create the service entity for the Block Storage service
  shell: |
    openstack service create --name {{ keystone_cinder_name }} --description "OpenStack Block Storage" volume
  when: service_entity_exists|failed

- name: Test if service entity v2 exists
  shell: |
    openstack service list | grep " volumev2 "| wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Create the service entity for the Block Storage service
  shell: |
    openstack service create --name {{ keystone_cinder_name }}v2 --description "OpenStack Block Storage" volumev2
  when: service_entity_exists|failed


- name: Test if endpoint exists
  shell: |
    openstack endpoint list | grep " volume " | wc -l
  register: endpoint_exists
  ignore_errors: True
  failed_when: "'0' in endpoint_exists.stdout"

- name: Create the Block Storage service API endpoints
  shell: |
    openstack endpoint create --region {{ region_name }} volume public http://{{ admin_hostname }}:8776/v1/%\(tenant_id\)s
    openstack endpoint create --region {{ region_name }} volume internal http://{{ admin_hostname }}:8776/v1/%\(tenant_id\)s
    openstack endpoint create --region {{ region_name }} volume admin http://{{ admin_hostname }}:8776/v1/%\(tenant_id\)s
  when: endpoint_exists|failed

- name: Test if endpoint v2 exists
  shell: |
    openstack endpoint list | grep " volumev2 " | wc -l
  register: endpoint_exists
  ignore_errors: True
  failed_when: "'0' in endpoint_exists.stdout"

- name: Create the Block Storage service API v2 endpoints
  shell: |
    openstack endpoint create --region {{ region_name }} volumev2 public http://{{ admin_hostname }}:8776/v2/%\(tenant_id\)s
    openstack endpoint create --region {{ region_name }} volumev2 internal http://{{ admin_hostname }}:8776/v2/%\(tenant_id\)s
    openstack endpoint create --region {{ region_name }} volumev2 admin http://{{ admin_hostname }}:8776/v2/%\(tenant_id\)s
  when: endpoint_exists|failed

# To install and configure the Image Service components
- name: Install cinder components
  apt: name={{ item }} state=present
  with_items:
  - cinder-api
  - cinder-scheduler
  - python-cinderclient
  tags:
  - appliance


- name: Configure cinder service
  template: src=cinder.conf.j2 dest=/etc/cinder/cinder.conf owner=cinder group=cinder
  notify:
  - populate database
  - restart cinder-scheduler
  - restart cinder-api


- name: Remove sqlite database
  file: path=/var/lib/cinder/cinder.sqlite state=absent
