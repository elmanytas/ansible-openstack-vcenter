# http://docs.openstack.org/liberty/install-guide-ubuntu/nova.html
# http://docs.openstack.org/liberty/install-guide-ubuntu/nova-controller-install.html
## Install NOVA but not configure ##
# mysql

- name: Create mysql database
  mysql_db: name=nova state=present
  when: relational_database == "mysql"
  notify:
  - populate neutron database

- name: Create mysql database user from localhost
  mysql_user: name=nova host=localhost password={{ nova_dbpass }} priv=nova.*:ALL,GRANT state=present
  when: relational_database == "mysql"

- name: Create mysql database user from %
  mysql_user: name=nova host=% password={{ nova_dbpass }} priv=nova.*:ALL,GRANT state=present
  when: relational_database == "mysql"

# postgresql
- name: Create postgresql database
  postgresql_db: name=nova
  when: relational_database == "postgresql"
  notify:
  - populate neutron database

- name: Create postgresql database user
  postgresql_user: db=nova name=nova password={{ nova_dbpass }} priv=ALL
  when: relational_database == "postgresql"


- name: Create the nova user
  keystone_user:
    user={{ keystone_nova_name }}
    tenant={{ keystone_service_project_name }}
    password={{ keystone_nova_password }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

- name: Add the admin role to the nova user
  keystone_user:
    role={{ keystone_admin_role }}
    user={{ keystone_nova_name }}
    tenant={{ keystone_service_project_name }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

#Create the service entity and API endpoint
- name: Test if service entity exists
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v3
    export OS_IDENTITY_API_VERSION=3
    openstack service list | grep " compute " | wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Create the service entity for the Nova service
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v3
    export OS_IDENTITY_API_VERSION=3
    openstack service create --name {{ keystone_nova_name }} --description "OpenStack Compute" compute
  when: service_entity_exists|failed

- name: Test if endpoint exists
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v3
    export OS_IDENTITY_API_VERSION=3
    openstack endpoint list | grep ' compute ' | wc -l
  register: endpoint_exists
  ignore_errors: True
  failed_when: "'0' in endpoint_exists.stdout"

- name: Create the Compute service API endpoints
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v3
    export OS_IDENTITY_API_VERSION=3
    openstack endpoint create --region {{ region_name }} compute public http://{{ admin_hostname }}:8774/v2/%\(tenant_id\)s
    openstack endpoint create --region {{ region_name }} compute internal http://{{ admin_hostname }}:8774/v2/%\(tenant_id\)s
    openstack endpoint create --region {{ region_name }} compute admin http://{{ admin_hostname }}:8774/v2/%\(tenant_id\)s
  when: endpoint_exists|failed

# To install and configure the Compute controller components
- name: Install nova packages
  apt: name={{ item }} state=present
  with_items:
  - nova-api
  - nova-cert
  - nova-conductor
  - nova-consoleauth
  - nova-novncproxy
  - nova-scheduler
  - python-novaclient
  tags:
  - appliance


# http://docs.openstack.org/liberty/install-guide-ubuntu/neutron.html
# http://docs.openstack.org/liberty/install-guide-ubuntu/neutron-controller-install.html
## Install NEUTRON controller but no configure ##
# mysql
- name: Create database
  mysql_db: name=neutron state=present
  when: relational_database == "mysql"
  notify:
  - populate nova database

- name: Create database user from localhost
  mysql_user: name=neutron host=localhost password={{ neutron_dbpass }} priv=neutron.*:ALL,GRANT state=present
  when: relational_database == "mysql"

- name: Create database user from %
  mysql_user: name=neutron host=% password={{ neutron_dbpass }} priv=neutron.*:ALL,GRANT state=present
  when: relational_database == "mysql"


# postgresql
- name: Create database
  postgresql_db: name=neutron
  when: relational_database == "postgresql"
  notify:
  - populate nova database

- name: Create database user
  postgresql_user: db=neutron name=neutron password={{ neutron_dbpass }} priv=ALL
  when: relational_database == "postgresql"


- name: Create the neutron user
  keystone_user:
    user={{ keystone_neutron_name }}
    tenant={{ keystone_service_project_name }}
    password={{ keystone_neutron_password }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

- name: Add the admin role to the neutron user
  keystone_user:
    role={{ keystone_admin_role }}
    user={{ keystone_neutron_name }}
    tenant={{ keystone_service_project_name }}
    token={{ administration_token }}
    endpoint=http://{{ admin_hostname }}:35357/v2.0

#Create the service entity and API endpoint
- name: Test if service entity exists
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v3
    export OS_IDENTITY_API_VERSION=3
    openstack service list | grep " network "| wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Create the service entity for the Neutron service
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v3
    export OS_IDENTITY_API_VERSION=3
    openstack service create --name {{ keystone_neutron_name }} --description "OpenStack Networking" network
  when: service_entity_exists|failed

- name: Test if network service API endpoint exists
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v3
    export OS_IDENTITY_API_VERSION=3
    openstack endpoint list | grep ' network ' | wc -l
  register: endpoint_exists
  ignore_errors: True
  failed_when: "'0' in endpoint_exists.stdout"

- name: Create the Compute service API endpoints
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v3
    export OS_IDENTITY_API_VERSION=3
    openstack endpoint create --region {{ region_name }} network public http://{{ admin_hostname }}:9696
    openstack endpoint create --region {{ region_name }} network internal http://{{ admin_hostname }}:9696
    openstack endpoint create --region {{ region_name }} network admin http://{{ admin_hostname }}:9696
  when: endpoint_exists|failed

# http://docs.openstack.org/liberty/install-guide-ubuntu/neutron-controller-install-option2.html
- name: Install networking components
  apt: name={{ item }} state=present
  with_items:
  - neutron-server
  - neutron-plugin-ml2
  - python-neutronclient
  tags:
  - appliance

## Install NEUTRON component and configure it ##
# http://docs.openstack.org/juno/install-guide/install/apt/content/section_neutron-networking.html
# http://docs.openstack.org/juno/install-guide/install/apt/content/neutron-network-node.html

- name: Enable ip forwarding
  sysctl: name=net.ipv4.ip_forward value=1 reload=yes sysctl_set=yes

- name: Disable all rp_filter
  sysctl: name=net.ipv4.conf.all.rp_filter value=0 reload=yes sysctl_set=yes

- name: Disable default rp_filter
  sysctl: name=net.ipv4.conf.default.rp_filter value=0 reload=yes sysctl_set=yes

- name: Install networking components
  apt: name={{ item }} state=present
  with_items:
  - neutron-plugin-ml2
  - neutron-plugin-openvswitch-agent
  - neutron-l3-agent
  - neutron-dhcp-agent
  - neutron-metadata-agent
  tags:
  - appliance

- name: Configure neutron server component
  template: src=neutron.conf.j2 dest=/etc/neutron/neutron.conf owner=root group=neutron mode=0644
  notify:
  - populate neutron database
  - restart nova-api
  - restart nova-scheduler
  - restart nova-conductor
  - restart neutron-server
  - restart neutron-plugin-openvswitch-agent
  - restart neutron-l3-agent
  - restart neutron-dhcp-agent
  - restart neutron-metadata-agent

- name: Configure Modular Layer 2 (ML2) plug-in
  template: src=ml2_conf.ini.j2 dest=/etc/neutron/plugins/ml2/ml2_conf.ini owner=root group=neutron mode=0644
  notify:
  - populate neutron database
  - restart neutron-plugin-openvswitch-agent
  - restart neutron-server
  - restart neutron-server

- name: Configure Layer-3 (L3) agent
  template: src=l3_agent.ini.j2 dest=/etc/neutron/l3_agent.ini owner=root group=neutron mode=0644
  notify:
  - restart neutron-l3-agent
  - restart neutron-server

- name: Configure the DHCP agent
  template: src={{ item }}.j2 dest=/etc/neutron/{{ item }} owner=root group=root mode=0644
  with_items:
  - dhcp_agent.ini
  - dnsmasq-neutron.conf
  notify:
  - restart neutron-dhcp-agent
  - pkill dnsmasq

- name: Configure the metadata agent
  template: src=metadata_agent.ini.j2 dest=/etc/neutron/metadata_agent.ini owner=root group=root mode=0644
  notify:
  - restart neutron-metadata-agent

- name: Configure the lbaas agent
  template: src=lbaas_agent.ini.j2 dest=/etc/neutron/lbaas_agent.ini owner=root group=root mode=0644
  notify:
  - restart neutron-lbaas-agent
  - restart neutron-server

- name: Configure neutron to use lbaas agent
  template: src=neutron_lbaas.conf.j2 dest=/etc/neutron/neutron_lbaas.conf owner=root group=root mode=0644
  notify:
  - restart neutron-lbaas-agent
  - restart neutron-server

# Configure Open vSwitch service
- name: Restart OVS service
  shell: service openvswitch-switch restart; ethtool -K ose gro off

- name: Add the external bridge
  openvswitch_bridge: bridge=br-ex state=present

- name: Add a port to the external bridge that connects to the physical external network interface
  openvswitch_port: bridge=br-ex port=ose state=present
  notify:
  - restart neutron-plugin-openvswitch-agent
  - restart neutron-l3-agent
  - restart neutron-dhcp-agent
  - restart neutron-metadata-agent

- name: Remove neutron sqlite database
  file: path=/var/lib/neutron/neutron.sqlite state=absent


- name: Configure Nova Compute to use Networking
  template: src=nova.conf.j2 dest=/etc/nova/nova.conf owner=nova group=nova
  notify:
  - populate nova database
  - restart nova-api
  - restart nova-cert
  - restart nova-consoleauth
  - restart nova-scheduler
  - restart nova-conductor
  - restart nova-novncproxy

- name: Remove sqlite database
  file: path=/var/lib/nova/nova.sqlite state=absent

# Create external net
- name: Test if public network exists
  shell: |
    . /root/admin-openrc.sh
    neutron net-list | grep ' public ' | wc -l
  register: net_exists
  ignore_errors: True
  failed_when: "'0' in net_exists.stdout"
  tags: workingon

- name: Create the public network
  shell: |
    . /root/admin-openrc.sh
    neutron net-create public --router:external --provider:physical_network external --provider:network_type flat
  when: net_exists|failed
  tags: workingon

# Create external subnet
- name: Test if public subnet exists
  shell: |
    . /root/admin-openrc.sh
    neutron subnet-list | grep ' public ' | wc -l
  register: subnet_exists
  ignore_errors: True
  failed_when: "'0' in subnet_exists.stdout"
  tags: workingon

- name: Create the public network
  shell: |
    . /root/admin-openrc.sh
    neutron subnet-create public {{ public_cidr }} --name public --allocation-pool start={{ public_allocation_pool.split(",")[0] }},end={{ public_allocation_pool.split(",")[-1] }} --disable-dhcp --gateway {{ public_gateway }}
  when: subnet_exists|failed
  tags: workingon



# Add lbaas.
# Thanks to: https://ask.openstack.org/en/question/82555/proper-installation-guide-for-lbaas-in-juno/?answer=82558#post-id-82558
- name: Install the lbaas agent
  apt: name=neutron-lbaas-agent state=present
  tags:
  - appliance
