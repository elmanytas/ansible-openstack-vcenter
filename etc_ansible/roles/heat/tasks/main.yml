# http://docs.openstack.org/juno/install-guide/install/apt/content/image-service-overview.html

# http://docs.openstack.org/juno/install-guide/install/apt/content/heat-install.html
- name: Create database
  mysql_db: name=heat state=present

- name: Create database user
  mysql_user: name=heat host=localhost password={{ heat_dbpass }} priv=heat.*:ALL,GRANT state=present

- name: Create database user
  mysql_user: name=heat host=% password={{ heat_dbpass }} priv=heat.*:ALL,GRANT state=present

- name: Create the heat user
  keystone_user:
    user={{ keystone_heat_name }}
#    tenant={{ keystone_service_tenant_name }}
    password={{ keystone_heat_password }}
#    token={{ administration_token }}
#    endpoint=http://{{ admin_hostname }}:35357/v2.0
    state=present

- name: Add the admin role to the heat user
  keystone_user:
    role={{ keystone_admin_role }}
    user={{ keystone_heat_name }}
    tenant={{ keystone_service_tenant_name }}
    #token={{ administration_token }}
    #endpoint=http://{{ admin_hostname }}:35357/v2.0
  
- name: Create the heat_stack_owner role 
  keystone_user:
    role={{ heat_stack_owner_role }}
 #   tenant={{ keystone_service_tenant_name }}
    #token={{ administration_token }}
    #endpoint=http://{{ admin_hostname }}:35357/v2.0
    state= present

- name: Add the heat_stack_owner role to the demo user and tenant
  keystone_user:
    role={{ heat_stack_owner_role }}
    user={{ demo_user }}
    tenant={{ demo_tenant }}

- name: Create the heat_stack_user role 
  keystone_user:
    role={{ heat_stack_user_role }}
#    tenant={{ keystone_service_tenant_name }}
#    token={{ administration_token }}
#    endpoint=http://{{ admin_hostname }}:35357/v2.0
    state= present

#Create the service entity and API endpoint
- name: Test if service entity exists
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v2.0
    openstack service list | grep " heat "| wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Test if service entity exists
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v2.0
    openstack service list | grep " heat-cfn "| wc -l
  register: service_entity_exists
  ignore_errors: True
  failed_when: "'0' in service_entity_exists.stdout"

- name: Create the service entity for the heat service
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v2.0
    openstack service create --name heat --description "Orchestration" orchestration
  when: service_entity_exists|failed

- name: Create the service entity for the heat-cfn service
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v2.0
    openstack service create --name heat_cfn --description "Orchestration" cloudformation
  when: service_entity_exists|failed

- name: Test if endpoint exists
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v2.0
    openstack endpoint list | grep heat | wc -l
  register: endpoint_exists
  ignore_errors: True
  failed_when: "'0' in endpoint_exists.stdout"

- name: Create the Heat service API endpoints
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v2.0
    openstack endpoint create --publicurl http://{{ admin_hostname }}:8004/v1/%\(tenant_id\)s --internalurl http://{{ admin_hostname }}:8004/v1/%\(tenant_id\)s --adminurl http://{{ admin_hostname }}:8004/v1/%\(tenant_id\)s  --region {{ region_name }} orchestration
  when: endpoint_exists|failed

- name: Create the Heat-cfn service API endpoints
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v2.0
    openstack endpoint create --publicurl http://{{ admin_hostname }}:8000/v1 --internalurl http://{{ admin_hostname }}:8000/v1 --adminurl http://{{ admin_hostname }}:8000/v1 --region {{ region_name }} cloudformation
  when: endpoint_exists|failed

# To install and configure the Orchestration components
- name: Install heat-api
  apt: name=heat-api state=present

- name: Install heat-api-cfn
  apt: name=heat-api-cfn state=present

- name: Install heat-engine
  apt: name=heat-engine state=present

- name: Install python-heatclient
  apt: name=python-heatclient state=present

- name: Configure heat api service (TBD)
  template: src=heat.conf.j2 dest=/etc/heat/heat.conf owner=heat group=heat

# To create de heat domain in Identity service
- name:  Create heat domain in Identity service
  shell: |
    export OS_TOKEN={{ administration_token }}
    export OS_URL=http://{{ admin_hostname }}:35357/v2.0
    heat-keystone-setup-domain --stack-user-domain-name {{ heat_user_domain }} --stack-domain-admin {{ heat_domain_admin }} --stack-domain-admin-password {{ heat_domain_password }}
  notify:
  - populate database
  - restart heat-api
  - restart heat-api-cfn
  - restart heat-engine


